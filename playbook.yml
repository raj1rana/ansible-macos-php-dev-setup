- hosts: mac

  roles:
    - nvm

  vars_files:
    - vars/env.yml
  vars: 
    homebrew_installed_packages: 
        - openldap
        - libiconv
        - mysql@{{ mysql_version }}
        - httpd
        - php@7.2
        - php@7.3
        - php@7.4
    # We're installing stable Node.js version by default
    nvm_default_node_version: stable
    nvm_node_versions:
        - "{{ nvm_default_node_version }}"    
    # Initialize shell profile scripts
    nvm_shell_init: yes
    # Define the shell profile scripts to initialiaze
    nvm_shell_profile_scripts:
        - .bashrc
        - .zshrc
    cask_packages:  # other desktop apps 
        - visual-studio-code	
        - sequel-pro
        - google-chrome
  tasks:

    - name: Install Homebrew
      shell: ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      args:
        creates: /usr/local/bin/brew

    # The homebrew module's "update_homebrew" option seems to update homebrew
    # for every package which is unnecessarily slow.
    # Instead we just do it once right here.
    - name: Update homebrew
      homebrew:
        update_homebrew: yes

    - name: Installing homebrew packages
      homebrew:
        name: '{{ items }}'
        state: present
        update_homebrew: true
      with_items: '{{ homebrew_installed_packages }}'

    - name: Install GUI tools 
      homebrew_cask: 
            name: '{{ item }}'
            state: present
            install_options: 'appdir=/Applications'
      with_items: '{{ cask_packages }}'
    #? removing the default conf file
    - name: deleting httpd.conf from  /usr/local/etc/httpd/httpd.conf
      file:
        path: "/usr/local/etc/httpd/httpd.conf"
        state: absent

    #? adding custom conf file
    - name: Adding our httpd.conf to /usr/local/etc/httpd/httpd.conf
      template:
        src: "files/httpd.conf.j2"
        dest: "/usr/local/etc/httpd/httpd.conf"
    

    #? cecking if the log file exists
    - name: Checking if log file exists
      stat:
        path: "/var/log/apache2/error_log"
      register: error_file
    
     #? cecking if the log file exists
    - name: Checking if log file exists
      stat:
        path: "/var/log/apache2/access_log"
      register: access_file

    #? changing permission of the log file
    - name: change permission of the log file
      become: yes
      file:
        path: "/var/log/apache2/error_log"
        mode: 0777
      when: error_file.stat.exists == true

    #? Changing permission of the log file
    - name: change permission of the log file
      become: true
      file:
          path: "/var/log/apache2/access_log"
          mode: 0777
      when: access_file.stat.exists == true


    #?create profile file for mac zshrc
    - name: Create zshrc for user
      file:
        path: "/Users/{{ username }}/.zshrc"
        state: touch


    #! configuring path for our services
    - name: configure mysql path
      lineinfile:
        path: "/Users/{{ username }}/.zshrc"
        line: 'export PATH="/usr/local/opt/mysql@{{ mysql_version }}/bin:$PATH"'

    - name: configuring php path
      lineinfile:
        path: "/Users/{{ username }}/.zshrc"
        line: 'export PATH="/usr/local/opt/php@7.3/bin:$PATH"'

    - name: congiguring sbin for php0.
      lineinfile:
        path: "/Users/{{ username }}/.zshrc"
        line: 'export PATH="/usr/local/opt/php@7.3/sbin:$PATH"'
    # ! Reload zshrc
    - name: provsioning script to restart and start the services
      copy:
        src: "services.sh"
        dest: "/Users/{{ username }}/"
        mode: 0777
    - name: running the script
      command: sh /Users/{{ username }}/services.sh
      
    #!  httpd configurations
    - name: create direcroty for virtual hosts
      file:
        path: "/usr/local/etc/httpd/extra/sites-available"
        state: directory
    #? Create document root 
    - name: create document root  for demo  host

      file:
        path: "{{ document_root }}/demo"
        state: directory




    #! creating index files for the demo v-host
    - name: creating a phpinfo file in the documentroot
      template:
        src: "files/index.php.j2"
        dest: "{{ document_root }}/index.php"
    - name: Creating a dummy site
      template:
        src: "files/index.html.j2"
        dest: "{{ document_root }}/demo/index.html"

    - name: Creating a dummy virtual_host
      template:
        src: "files/dummy.conf.j2"
        dest: "/usr/local/etc/httpd/extra/sites-available/demo.local.conf"

    #! adding dummy host to local resolver
    - name: Editing hosts file for localdomain
      become: true
      lineinfile:
        path: "/etc/hosts"
        line: "127.0.0.1 demo.local"






